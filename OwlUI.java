/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my.owl;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.time.Month;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JLabel;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;


/**
 * Front end interface to the OWL Intuitive Heating and Electricty devices
 * @author Gary
 */
public class OwlUI extends javax.swing.JFrame {
    private ConfigFile Config ;
    private OwlCommands  Commands;
    private HeatingPeriods HPeriods;
    
    /**
     * Creates new form OwlUI
     */
    public OwlUI() {
	String item;
	initComponents();
	setVisible(true); // Make Screen Visible when returning from another Scrn 
	try {

	    // Load Config Parameter
	    Config = new ConfigFile();
	    Config.LoadConfigFile();
	    wIPAddress.setText(Config.IpAddr1);
	    wUDPKey.setText(Config.UDPKey1);

	    if (Config.DeviceType1.equals("Heating")){
		wCheckBoxHeating.setSelected(true);
		jPanelHeating.setVisible(true);
		jPanelElectricity.setVisible(false);
		}
	    if (Config.DeviceType1.equals("Electricity")){
		jPanelHeating.setVisible(false);
		jPanelElectricity.setVisible(true);
		wCheckBoxElectic.setSelected(true);
		}
	    Commands = new OwlCommands (Config.IpAddr1);
	    LoadSystemDetails(Config.UDPKey1) ;  		    
	    

		    
	    // Load Heating Periods
	    HPeriods = new HeatingPeriods(Config.IpAddr1,Config.UDPKey1);	    

	    // Load Periods into Table	    
	    for (int i=0; i < HPeriods.GetNoOfPeriods(); i++) { // Get each heating Period
		if (!HPeriods.GetStart(i).equals("EMPTY")) {  // Skip any black periods
		        Object[] row = { HPeriods.GetDay(i), HPeriods.GetStart(i), HPeriods.GetEnd(i), HPeriods.GetTemp(i)};
			DefaultTableModel model = (DefaultTableModel) jTablePeriods.getModel();
			model.addRow(row);
		}
	    }
	    
	    // Load Summer Dates
	    OwlHeatingTimes calendarDates;
	    calendarDates = Commands.OwlLoadSummerDates(wUDPKey.getText());
	    jSpinnerSummerStartDay.setValue(calendarDates.iSummerStartDay);
	    String s = ConvertMthToMthName(calendarDates.iSummerStartMth);	    
	    jSpinnerSummerStartMth.setValue(s);
	    jSpinnerSummerEndDay.setValue(calendarDates.iSummerEndDay);
	    s = ConvertMthToMthName(calendarDates.iSummerEndMth);
	    jSpinnerSummerEndMth.setValue(s);	    
	    
	    // Load Holiday Dates
	    Date dHolStartDate = Commands.OwlLoadHolidayStart(wUDPKey.getText());
	    if (dHolStartDate.getTime() == 0) {
		jXDatePickerHolStart.getEditor().setText("");
	    } else {
		jXDatePickerHolStart.setDate(dHolStartDate);
	    }
	    
	    Date dHolEndDate = Commands.OwlLoadHolidayEnd(wUDPKey.getText());
	    if (dHolEndDate.getTime() == 0) {
		jXDatePickerHolEnd.getEditor().setText("");
	    } else {
		jXDatePickerHolEnd.setDate(dHolEndDate);
	    
	    }
 	    
	} catch (Exception exc) {
 		jResponseTextArea.setText("OwlUI Exception Occured");
	}	 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSpinner2 = new javax.swing.JSpinner();
        jXDatePicker6 = new org.jdesktop.swingx.JXDatePicker();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        wIPAddress = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        wUDPKey = new javax.swing.JTextField();
        wCheckBoxHeating = new javax.swing.JCheckBox();
        wCheckBoxElectic = new javax.swing.JCheckBox();
        jLabel10 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanelHeating = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jHeatingExplantion = new javax.swing.JTextArea();
        jPanel6 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jXDatePickerHolStart = new org.jdesktop.swingx.JXDatePicker();
        jXDatePickerHolEnd = new org.jdesktop.swingx.JXDatePicker();
        jLabel16 = new javax.swing.JLabel();
        jSpinnerSummerStartDay = new javax.swing.JSpinner();
        jSpinnerSummerStartMth = new javax.swing.JSpinner();
        jSpinnerSummerEndMth = new javax.swing.JSpinner();
        jSpinnerSummerEndDay = new javax.swing.JSpinner();
        jLabel13 = new javax.swing.JLabel();
        jButtonHoliday = new javax.swing.JButton();
        jButtonSummer = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jButtonComfort = new javax.swing.JButton();
        jToggleButtonBoost = new javax.swing.JToggleButton();
        jButtonStandby = new javax.swing.JButton();
        jButtonAway = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jButtonLoad = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTablePeriods = new javax.swing.JTable();
        jButtonDelPeriod = new javax.swing.JButton();
        jButtonAddEntry = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jTextFieldHeatTimestamp = new javax.swing.JTextField();
        jTextFieldHeatState = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jTextFieldReqTemp = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jTextFieldBattery = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jTextFieldCurrTemp = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jTextFieldHeatUntil = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        jTextFieldHeatRssi = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        jTextFieldHeatZone = new javax.swing.JTextField();
        jTextFieldHeatConfFlag = new javax.swing.JTextField();
        jLabelHeatConfFlag = new javax.swing.JLabel();
        jLabelHeatLgi = new javax.swing.JLabel();
        jTextFieldHeatLqi = new javax.swing.JTextField();
        jLabelHeatLast = new javax.swing.JLabel();
        jTextFieldHeatLast = new javax.swing.JTextField();
        jPanelElectricity = new javax.swing.JPanel();
        jTextFieldElectCurr = new javax.swing.JTextField();
        jTextFieldElectDay = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jTextFieldElectBatt = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jTextFieldElectMacAddr = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jTextFieldElectRssi = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jTextFieldElectLinkQual = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jTextFieldElectChan = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jTextFieldElectTimeStamp = new javax.swing.JTextField();
        jPanelSystem = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jTextFirmware = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextBuild = new javax.swing.JTextField();
        jTextVersion = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jCommandComboBox = new javax.swing.JComboBox<>();
        jCommandDesc = new javax.swing.JTextArea();
        jCommandTextField = new javax.swing.JTextField();
        jResponseTextArea = new javax.swing.JTextArea();
        jButtonTransmit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jTextClockUTC = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextUpTime = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jTextClockLocal = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Owl Intuit");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setName("Owl Device"); // NOI18N

        jLabel2.setText("IP Address");

        wIPAddress.setToolTipText("The IP address of the OWL device");
        wIPAddress.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                wIPAddressFocusLost(evt);
            }
        });

        jLabel3.setText("UDP key");

        wUDPKey.setToolTipText("The Access key for the device obtained from OWL website.");
        wUDPKey.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                wUDPKeyFocusLost(evt);
            }
        });

        wCheckBoxHeating.setText("Heating");
        wCheckBoxHeating.setToolTipText("Tick if the type of OWL device for this IP address and Key is a heating control");
        wCheckBoxHeating.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wCheckBoxHeatingActionPerformed(evt);
            }
        });

        wCheckBoxElectic.setText("Electricity");
        wCheckBoxElectic.setToolTipText("Tick if the type of OWL device for this IP address and Key monitors electricity consumption");
        wCheckBoxElectic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wCheckBoxElecticActionPerformed(evt);
            }
        });

        jLabel10.setText("Device Type");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel10))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(wCheckBoxHeating)
                        .addGap(29, 29, 29)
                        .addComponent(wCheckBoxElectic))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(wIPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(wUDPKey, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wCheckBoxHeating)
                    .addComponent(wCheckBoxElectic)
                    .addComponent(jLabel10))
                .addGap(1, 1, 1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(wIPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(wUDPKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.setToolTipText("Owl Heating Information and Settings");
        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        jPanelHeating.setToolTipText("Heating information and settings");
        jPanelHeating.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPanelHeatingFocusGained(evt);
            }
        });

        jHeatingExplantion.setEditable(false);
        jHeatingExplantion.setColumns(20);
        jHeatingExplantion.setLineWrap(true);
        jHeatingExplantion.setRows(5);
        jScrollPane3.setViewportView(jHeatingExplantion);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Dates"));

        jLabel11.setText("Start");

        jLabel12.setText("End");

        jXDatePickerHolStart.setToolTipText("Start date of holiday");
        jXDatePickerHolStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXDatePickerHolStartActionPerformed(evt);
            }
        });

        jXDatePickerHolEnd.setToolTipText("End Date of Holiday");
        jXDatePickerHolEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXDatePickerHolEndActionPerformed(evt);
            }
        });

        jSpinnerSummerStartDay.setModel(new javax.swing.SpinnerNumberModel(1, 1, 31, 1));
        jSpinnerSummerStartDay.setToolTipText("Day of the Month summer starts");

        jSpinnerSummerStartMth.setModel(new javax.swing.SpinnerListModel(new String[] {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"}));
        jSpinnerSummerStartMth.setToolTipText("Month in which summer starts");

        jSpinnerSummerEndMth.setModel(new javax.swing.SpinnerListModel(new String[] {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"}));
        jSpinnerSummerEndMth.setToolTipText("Month in which summer ends");

        jSpinnerSummerEndDay.setModel(new javax.swing.SpinnerNumberModel(1, 1, 31, 1));
        jSpinnerSummerEndDay.setToolTipText("Day of the Month Summer Ends");

        jLabel13.setText("Save");

        jButtonHoliday.setText("Holiday");
        jButtonHoliday.setToolTipText("Save Holiday Dates to OWL device");
        jButtonHoliday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHolidayActionPerformed(evt);
            }
        });

        jButtonSummer.setText("Summer");
        jButtonSummer.setToolTipText("Save Summer Dates");
        jButtonSummer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSummerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel13)
                .addGap(49, 49, 49)
                .addComponent(jLabel11)
                .addGap(110, 110, 110)
                .addComponent(jLabel12)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jButtonHoliday, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jXDatePickerHolStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jButtonSummer)
                        .addGap(11, 11, 11)
                        .addComponent(jSpinnerSummerStartDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinnerSummerStartMth)
                        .addGap(4, 4, 4)))
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jXDatePickerHolEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(jLabel16))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jSpinnerSummerEndDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSpinnerSummerEndMth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(144, 144, 144))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13))
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel16))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jXDatePickerHolEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jXDatePickerHolStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonHoliday))))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerSummerEndMth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSummer)
                    .addComponent(jSpinnerSummerEndDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinnerSummerStartMth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinnerSummerStartDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Modes"));

        jButtonComfort.setText("Comfort");
        jButtonComfort.setToolTipText("<html>If you are feeling cold and but would prefer if the heating is not on <br>\n then you should click on the Comfort icon. <br>\nThe heating will then remain in Comfort mode until the end of <br>the next Time Clock scheduled period.</html>");
        jButtonComfort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonComfortActionPerformed(evt);
            }
        });

        jToggleButtonBoost.setText("Boost");
        jToggleButtonBoost.setToolTipText("Boosts the heating temperature");
        jToggleButtonBoost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonBoostActionPerformed(evt);
            }
        });

        jButtonStandby.setText("Standby");
        jButtonStandby.setToolTipText("<html>If you are feeling too warm, or leaving your home unoccupied <br>\nand would like the heating to turn off then you should click on the Standby button. <br>\nThe heating will remain in Standby mode until the start of the next Time Clock scheduled period</html>");
        jButtonStandby.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStandbyActionPerformed(evt);
            }
        });

        jButtonAway.setText("Away");
        jButtonAway.setToolTipText("<html>Owl Intuition will maintain a frost protection temperature whilst you are away.<br> \nUntil toggled back on with the Away button </html>");
        jButtonAway.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAwayActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jButtonComfort, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAway, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jToggleButtonBoost, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonStandby)))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonStandby)
                    .addComponent(jToggleButtonBoost))
                .addGap(16, 16, 16)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAway)
                    .addComponent(jButtonComfort))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Time Periods"));

        jButtonLoad.setText("Load");
        jButtonLoad.setToolTipText("Load Time Periods from Device");
        jButtonLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadActionPerformed(evt);
            }
        });

        jButtonSave.setText("Save");
        jButtonSave.setToolTipText("Save Time Periods to Owl Device");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jTablePeriods.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTablePeriods.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Day", "Start Time", "End Time", "Temp "
            }
        ));
        jTablePeriods.setToolTipText("Heating Times");
        jTablePeriods.setShowHorizontalLines(false);
        jScrollPane2.setViewportView(jTablePeriods);

        jButtonDelPeriod.setText("Delete Entry");
        jButtonDelPeriod.setToolTipText("Delete Line at current cursor position");
        jButtonDelPeriod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelPeriodActionPerformed(evt);
            }
        });

        jButtonAddEntry.setText("Add Entry");
        jButtonAddEntry.setToolTipText("Insert a blank line at current cursor position");
        jButtonAddEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddEntryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonDelPeriod, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonAddEntry, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonLoad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(119, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jButtonLoad)
                        .addGap(48, 48, 48)
                        .addComponent(jButtonAddEntry)
                        .addGap(57, 57, 57)
                        .addComponent(jButtonDelPeriod)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonSave))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Status"));

        jTextFieldHeatTimestamp.setEditable(false);
        jTextFieldHeatTimestamp.setToolTipText("Time of last update of the Status Panel");

        jTextFieldHeatState.setEditable(false);
        jTextFieldHeatState.setToolTipText("Current state of the heating system");

        jLabel18.setText("State");

        jLabel27.setText("Time of Last Report");

        jTextFieldReqTemp.setEditable(false);
        jTextFieldReqTemp.setToolTipText("The temperature required during the current heating period");

        jLabel17.setText("Required Temp");

        jTextFieldBattery.setEditable(false);
        jTextFieldBattery.setToolTipText("Current voltage of the battery in thermostat");

        jLabel19.setText("Battery");

        jTextFieldCurrTemp.setEditable(false);
        jTextFieldCurrTemp.setToolTipText("The current temperture");

        jLabel15.setText("Current Temp");

        jLabel28.setText("Until");

        jTextFieldHeatUntil.setEditable(false);
        jTextFieldHeatUntil.setText(" ");
        jTextFieldHeatUntil.setToolTipText("The Time when the current heating period will end");

        jLabel29.setText("Signal Strength");

        jTextFieldHeatRssi.setEditable(false);
        jTextFieldHeatRssi.setToolTipText("Receive signal strength  (dBm) from thermostat");

        jLabel30.setText("Zone");

        jTextFieldHeatZone.setEditable(false);
        jTextFieldHeatZone.setToolTipText("Current active heating zone");

        jTextFieldHeatConfFlag.setEditable(false);
        jTextFieldHeatConfFlag.setText(" ");
        jTextFieldHeatConfFlag.setToolTipText("Flag to  show outstanding configurationto be pushed to the  device.");

        jLabelHeatConfFlag.setText("Conf Flag");

        jLabelHeatLgi.setText("Link Quality");

        jTextFieldHeatLqi.setEditable(false);
        jTextFieldHeatLqi.setToolTipText("Link quality (closer to 0 the better) ");

        jLabelHeatLast.setText("Last");

        jTextFieldHeatLast.setEditable(false);
        jTextFieldHeatLast.setToolTipText("Seconds since themostat connected to network");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(jLabelHeatConfFlag)
                    .addComponent(jLabel19)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                                .addComponent(jTextFieldCurrTemp, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel17))
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldBattery, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldHeatConfFlag, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldHeatRssi, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel10Layout.createSequentialGroup()
                                        .addComponent(jTextFieldHeatLqi, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabelHeatLast))))
                            .addComponent(jTextFieldReqTemp, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                        .addComponent(jTextFieldHeatState, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addComponent(jLabel27))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelHeatLgi, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel28, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                                    .addComponent(jLabel29)
                                    .addGap(147, 147, 147)
                                    .addComponent(jLabel30))))))
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldHeatLast, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldHeatZone, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jTextFieldHeatTimestamp, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jTextFieldHeatUntil, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel15)
                                    .addComponent(jTextFieldCurrTemp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(21, 21, 21))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextFieldHeatUntil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel28))
                                .addGap(18, 18, 18)))
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel27)
                            .addComponent(jTextFieldHeatTimestamp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(jTextFieldReqTemp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel18)
                            .addComponent(jTextFieldHeatState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldHeatRssi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel30)
                        .addComponent(jLabel29)
                        .addComponent(jTextFieldHeatZone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldBattery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel19)))
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelHeatConfFlag, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldHeatConfFlag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldHeatLqi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldHeatLast, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelHeatLgi, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabelHeatLast)))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout jPanelHeatingLayout = new javax.swing.GroupLayout(jPanelHeating);
        jPanelHeating.setLayout(jPanelHeatingLayout);
        jPanelHeatingLayout.setHorizontalGroup(
            jPanelHeatingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelHeatingLayout.createSequentialGroup()
                .addGroup(jPanelHeatingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelHeatingLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanelHeatingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelHeatingLayout.createSequentialGroup()
                                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addGap(8, 8, 8))
                            .addGroup(jPanelHeatingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 652, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanelHeatingLayout.createSequentialGroup()
                                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(57, 57, 57))
        );
        jPanelHeatingLayout.setVerticalGroup(
            jPanelHeatingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelHeatingLayout.createSequentialGroup()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelHeatingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                .addGap(28, 28, 28))
        );

        jTabbedPane1.addTab("Heating", jPanelHeating);

        jPanelElectricity.setToolTipText("OWL Electricity Monitor Information.");

        jTextFieldElectCurr.setEditable(false);
        jTextFieldElectCurr.setToolTipText("Current Wattage being used");

        jTextFieldElectDay.setEditable(false);
        jTextFieldElectDay.setToolTipText("Total Kilo Watts Hour used");
        jTextFieldElectDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldElectDayActionPerformed(evt);
            }
        });

        jLabel20.setText("Current");

        jLabel21.setText("Day");

        jLabel22.setText("Battery");

        jTextFieldElectBatt.setEditable(false);
        jTextFieldElectBatt.setToolTipText("Battery voltage in mVolts");

        jLabel14.setText("Mac Address");

        jTextFieldElectMacAddr.setEditable(false);
        jTextFieldElectMacAddr.setToolTipText("Hardware address of electricity supply monitor");

        jLabel23.setText("Receive Signal Strength");

        jTextFieldElectRssi.setEditable(false);
        jTextFieldElectRssi.setToolTipText("Receive signal strength  (dBm) from Electricity Supply Monitor");

        jLabel24.setText("Link Quality");

        jTextFieldElectLinkQual.setEditable(false);
        jTextFieldElectLinkQual.setToolTipText("Link quality (closer to 0 the better)");
        jTextFieldElectLinkQual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldElectLinkQualActionPerformed(evt);
            }
        });

        jLabel25.setText("Channel");

        jTextFieldElectChan.setEditable(false);
        jTextFieldElectChan.setToolTipText("Wireless channel being used");

        jLabel26.setText("Time of Last Report");

        jTextFieldElectTimeStamp.setEditable(false);
        jTextFieldElectTimeStamp.setToolTipText("Seconds since the last report was received from this device");

        javax.swing.GroupLayout jPanelElectricityLayout = new javax.swing.GroupLayout(jPanelElectricity);
        jPanelElectricity.setLayout(jPanelElectricityLayout);
        jPanelElectricityLayout.setHorizontalGroup(
            jPanelElectricityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelElectricityLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanelElectricityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelElectricityLayout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addGap(52, 52, 52))
                    .addGroup(jPanelElectricityLayout.createSequentialGroup()
                        .addGroup(jPanelElectricityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelElectricityLayout.createSequentialGroup()
                                .addComponent(jLabel25)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextFieldElectChan, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelElectricityLayout.createSequentialGroup()
                                .addComponent(jLabel20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextFieldElectCurr, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel21)
                                .addGap(18, 18, 18)
                                .addComponent(jTextFieldElectDay, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelElectricityLayout.createSequentialGroup()
                                .addGroup(jPanelElectricityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel23)
                                    .addComponent(jLabel26))
                                .addGap(39, 39, 39)
                                .addGroup(jPanelElectricityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldElectTimeStamp, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanelElectricityLayout.createSequentialGroup()
                                        .addComponent(jTextFieldElectRssi, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(27, 27, 27)
                                        .addGroup(jPanelElectricityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel24)
                                            .addGroup(jPanelElectricityLayout.createSequentialGroup()
                                                .addGap(3, 3, 3)
                                                .addComponent(jLabel22)))))))
                        .addGap(36, 36, 36)))
                .addGroup(jPanelElectricityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldElectBatt, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldElectLinkQual, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldElectMacAddr, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(115, Short.MAX_VALUE))
        );
        jPanelElectricityLayout.setVerticalGroup(
            jPanelElectricityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelElectricityLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanelElectricityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(jTextFieldElectCurr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21)
                    .addComponent(jTextFieldElectDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldElectBatt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22))
                .addGap(24, 24, 24)
                .addGroup(jPanelElectricityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(jTextFieldElectChan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(jTextFieldElectMacAddr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(jPanelElectricityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(jTextFieldElectRssi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24)
                    .addComponent(jTextFieldElectLinkQual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanelElectricityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(jTextFieldElectTimeStamp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 558, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Electricity", jPanelElectricity);

        jPanelSystem.setToolTipText("OWL Device System Information");
        jPanelSystem.setPreferredSize(new java.awt.Dimension(840, 840));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Device"));

        jLabel4.setText("FIrmware");

        jLabel5.setText("Version");

        jLabel6.setText("Build");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5))
                .addGap(31, 31, 31)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jTextBuild, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextVersion, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFirmware))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextFirmware, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextVersion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextBuild, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("UDP Commands"));

        jCommandComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCommandComboBoxActionPerformed(evt);
            }
        });

        jCommandDesc.setEditable(false);
        jCommandDesc.setColumns(20);
        jCommandDesc.setLineWrap(true);
        jCommandDesc.setRows(5);
        jCommandDesc.setWrapStyleWord(true);

        jResponseTextArea.setColumns(20);
        jResponseTextArea.setLineWrap(true);
        jResponseTextArea.setRows(5);
        jResponseTextArea.setWrapStyleWord(true);

        jButtonTransmit.setText("Transmit");
        jButtonTransmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTransmitActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Response");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jCommandComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButtonTransmit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCommandDesc)
                    .addComponent(jCommandTextField)
                    .addComponent(jResponseTextArea)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jCommandComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jCommandDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jCommandTextField)
                    .addComponent(jButtonTransmit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jResponseTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Time"));

        jLabel7.setText("Clock (UTC)");

        jLabel8.setText("Run Time");

        jLabel9.setText("Clock (Local)");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addGap(14, 14, 14))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextClockUTC)
                    .addComponent(jTextClockLocal)
                    .addComponent(jTextUpTime))
                .addGap(0, 144, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jTextClockUTC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextClockLocal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addComponent(jTextUpTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel8)))
                .addGap(49, 49, 49))
        );

        javax.swing.GroupLayout jPanelSystemLayout = new javax.swing.GroupLayout(jPanelSystem);
        jPanelSystem.setLayout(jPanelSystemLayout);
        jPanelSystemLayout.setHorizontalGroup(
            jPanelSystemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSystemLayout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
            .addGroup(jPanelSystemLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelSystemLayout.setVerticalGroup(
            jPanelSystemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelSystemLayout.createSequentialGroup()
                .addGroup(jPanelSystemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelSystemLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(311, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("System", jPanelSystem);

        jPanel2.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 113, Short.MAX_VALUE))
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(636, 636, 636)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(232, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        );

        jPanel1.getAccessibleContext().setAccessibleName("Owl Device");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Convert the Number of t he Month to the Name of the Month
     * @param iMth Number of Month
     * @return  Name of Month
     */
    private String ConvertMthToMthName (int iMth) {
	String sMthName []= {"January", "Feburary", "March", "April", "May","June","July","August","September","October","November","December"};
	return sMthName [iMth-1];
    }
    
    /**
     * Defines IP Address of OWL Device
     * @param evt 
     */
    private void wIPAddressFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_wIPAddressFocusLost
	try {
    	    if (wCheckBoxHeating.isSelected()){
		Config.IpAddr1=wIPAddress.getText();
		}
	    else{
		Config.IpAddr2=wIPAddress.getText();
		}	    
	    Config.SaveConfigFile();
	} catch (Exception exc) {
	    jResponseTextArea.setText("wIPAddressFocusLost Exception Occured");
	}
    }//GEN-LAST:event_wIPAddressFocusLost

    /**
     * Defines the UDP Key for the OWL Device and saves it
     * @param evt 
     */
    private void wUDPKeyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_wUDPKeyFocusLost
	try {
	    if (wCheckBoxHeating.isSelected()){
		Config.UDPKey1=wUDPKey.getText();
		}
	    else {
		Config.UDPKey2=wUDPKey.getText();
		}

	    Config.SaveConfigFile();
	} catch (Exception exc) {
	    jResponseTextArea.setText("wUDPKeyFocusLost Exception Occured");
	}
    }//GEN-LAST:event_wUDPKeyFocusLost

    /**
     * Determines if the OWL Device is Heating Control
     * @param evt 
     */
    private void wCheckBoxHeatingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wCheckBoxHeatingActionPerformed
    	try {
	    wCheckBoxElectic.setSelected(false);
	    Config.DeviceType1="Heating";
    	    wIPAddress.setText(Config.IpAddr1);
	    wUDPKey.setText(Config.UDPKey1);
	    Config.SaveConfigFile();
	} catch (Exception exc) {
	    jResponseTextArea.setText("wCheckBoxHeatingActionPerformed Exception Occured");
	}
	LoadSystemDetails(Config.UDPKey1) ; 

//	jPanel2.removeAll();
//	jPanel2.repaint();
//	jPanel2.revalidate();
	
	//Add Panel
     //   jPanel2.add(jPanelHeating);
    //    jPanel2.repaint();
   //     jPanel2.revalidate();
    }//GEN-LAST:event_wCheckBoxHeatingActionPerformed

    /**
     * Defines if the OWL Device is an Electricity Monitor
     * @param evt 
     */
    private void wCheckBoxElecticActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wCheckBoxElecticActionPerformed
	try {
	    wCheckBoxHeating.setSelected(false);
	    Config.DeviceType2="Electricity";
    	    wIPAddress.setText(Config.IpAddr2);
	    wUDPKey.setText(Config.UDPKey2);
	    Config.SaveConfigFile();
	    } catch (Exception exc) {
		jResponseTextArea.setText("wCheckBoxElecticActionPerformed Exception Occured");
	    }
	LoadSystemDetails(Config.UDPKey2) ; 
//	jPanel2.removeAll();
//	jPanel2.repaint();
//	jPanel2.revalidate();
	
	//Add Panel
//        jPanel2.add(jPanelElectricity);
 //       jPanel2.repaint();
//        jPanel2.revalidate();
	
    }//GEN-LAST:event_wCheckBoxElecticActionPerformed

    /**
     * Transmit UDP Message from System Panel
     * @param evt 
     */
    private void jButtonTransmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTransmitActionPerformed
        try {
            UDPInterface client;
            client = new UDPInterface(wIPAddress.getText());
            String sReply = client.sendMsg(jCommandTextField.getText(),wUDPKey.getText());
            jResponseTextArea.setText(sReply);
        } catch (Exception exc) {
            jResponseTextArea.setText("jButton1ActionPerformed Exception Occured");
        }
    }//GEN-LAST:event_jButtonTransmitActionPerformed

    /**
     * Display a description of the selected command in the description text box
     * @param evt 
     */
    private void jCommandComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCommandComboBoxActionPerformed
        String sCommandDesc;
        sCommandDesc = Commands.OwlCommandsDesc(jCommandComboBox.getSelectedIndex());
	if (sCommandDesc.equals("")){
	    sCommandDesc = Commands.OwlErrorMsg();
	}
        jCommandDesc.setText(sCommandDesc);
        jCommandTextField.setText(Commands.OwlCommandMsg(jCommandComboBox.getSelectedIndex()));
    }//GEN-LAST:event_jCommandComboBoxActionPerformed

    /**
     * Insert a period into the table
     * @param evt 
     */
    private void jButtonAddEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddEntryActionPerformed
        String s;

        DefaultTableModel model = (DefaultTableModel) jTablePeriods.getModel();
        model.addRow(new Object[] {}); // Add row to table
        int iStartMoveFrom = jTablePeriods.getRowCount() - 2;
        int iStartMoveTo = (jTablePeriods.getRowCount()) -1;
        for (int i = jTablePeriods.getRowCount() - 2,
            j=(jTablePeriods.getRowCount()) -1;
            i >= jTablePeriods.getSelectedRow();
            i--, j-- ){

            for (int k = 0; k < 4; k++){
                s = (String) jTablePeriods.getModel().getValueAt(i, k);
                model.setValueAt(s, j, k);
            }
        }
        // Clear Inserted Row
        for (int k = 0; k < 4; k++){
            model.setValueAt("", jTablePeriods.getSelectedRow(), k);
        }
    }//GEN-LAST:event_jButtonAddEntryActionPerformed

    /**
     * Delete a period from the table
     * @param evt 
     */
    private void jButtonDelPeriodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDelPeriodActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTablePeriods.getModel();
        model.removeRow(jTablePeriods.getSelectedRow()); // Delete row from table
    }//GEN-LAST:event_jButtonDelPeriodActionPerformed

    /**
     *  Save Heating Period Table to OWL Unit
     * Example OWL Response Buffer from DAYHEATINGPERIODS Command :-
     * OK,DAYHEATINGPERIODS,4,60,21600,10.00,0,27000,41400,19.20,0,41400,66600,19.00,0,66600,73800,18.60,0,73800,79200,18.00,0,0,0,0.00,0,0,0,0.00,0,0,0,0.00,0,0,0,0.00,0,0,0,0.00,0
     * @param evt 
     */
    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        jHeatingExplantion.setText("Saving"); // Set Explantion text
        // Sort the Period Table

        // Store Periods from Screen table into Period Array
        DefaultTableModel model = (DefaultTableModel) jTablePeriods.getModel();
        for (int i=0; i < jTablePeriods.getRowCount(); i++) { // Get each heating Period
            if (!HPeriods.StorePeriodInArray(i,
                (String) jTablePeriods.getModel().getValueAt(i, 0),
                (String) jTablePeriods.getModel().getValueAt(i, 1),
                (String) jTablePeriods.getModel().getValueAt(i, 2),
                (String) jTablePeriods.getModel().getValueAt(i, 3))) {
            jHeatingExplantion.setText(HPeriods.ErrorMsg());
            HPeriods.ClearErrorMsg();
            return;
        }
        HPeriods.SetNoOfPeriods (jTablePeriods.getRowCount());
        HPeriods.ClearErrorMsg();
        }
        // Safe Periods to Device
        if (!HPeriods.SavePeriods(Config.UDPKey1)) {
            // Failed to save
            jHeatingExplantion.setText(HPeriods.ErrorMsg());
        } else {
            jHeatingExplantion.setText("Saved OK");
        }
    }//GEN-LAST:event_jButtonSaveActionPerformed

    /**
     *  Reload the Heating Periods
     * @param evt 
     */
    private void jButtonLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadActionPerformed
        int i;
        DefaultTableModel model = (DefaultTableModel) jTablePeriods.getModel();

        // Clear Table
        model.setRowCount(0);

        // Load Periods into Table
        for (i=0; i < HPeriods.GetNoOfPeriods(); i++) { // Get each heating Period
            if (!HPeriods.GetStart(i).equals("EMPTY")) {  // Skip any black periods
                Object[] row = { HPeriods.GetDay(i), HPeriods.GetStart(i), HPeriods.GetEnd(i), HPeriods.GetTemp(i)};

                model.addRow(row);
            }
        }
    }//GEN-LAST:event_jButtonLoadActionPerformed

    /**
     * Set OWL Heating into Comfort mode
     * @param evt 
     */
    private void jButtonComfortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonComfortActionPerformed
	if (Commands.OwlComfort(wUDPKey.getText())) {
	    jHeatingExplantion.setText("Set Comfort Mode OK");
	} else {
	     jHeatingExplantion.setText(Commands. OwlErrorMsg());
	}
    }//GEN-LAST:event_jButtonComfortActionPerformed

    /**
     *  Toggle Heating Boost ON/OFF
     * @param evt 
     */
    private void jToggleButtonBoostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonBoostActionPerformed
	String sSw;
	if (jToggleButtonBoost.isSelected()) {
	    sSw = "ON";
//	    jToggleButtonBoost.setText("Boost OFF");
	    jToggleButtonBoost.setBackground(Color.RED);
	    
	} else {
	    sSw ="OFF";
//	    jToggleButtonBoost.setText("Boost ON");
	    jToggleButtonBoost.setBackground(Color.LIGHT_GRAY);
	}
	
	if (Commands.OwlBoost(sSw,wUDPKey.getText())) {
	    jHeatingExplantion.setText("Set BOOST Mode " + sSw + " OK");
	} else {
	     jHeatingExplantion.setText(Commands. OwlErrorMsg());
	}	
    }//GEN-LAST:event_jToggleButtonBoostActionPerformed

    /**
     *  Holiday Start Day
     * @param evt 
     */
    private void jXDatePickerHolStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXDatePickerHolStartActionPerformed
    Date Holidaytart =     jXDatePickerHolStart.getDate();
    Date HolidayEnd  = jXDatePickerHolEnd.getDate();
    
    //Check Start date is before End Date
    if  (Holidaytart.after(HolidayEnd) ) {
	jHeatingExplantion.setText("Holiday start date is after end Date");
	return;
	}
    
    // Saye Holiday dates to OWL Device
    if (!Commands.OwlSaveHolidayDates (Holidaytart,HolidayEnd,wUDPKey.getText())) {
	jHeatingExplantion.setText(Commands. OwlErrorMsg());
	}
    }//GEN-LAST:event_jXDatePickerHolStartActionPerformed

    /**
     * Holiday End Day
     * @param evt 
     */
    private void jXDatePickerHolEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXDatePickerHolEndActionPerformed
    Date Holidaytart =     jXDatePickerHolStart.getDate();
    Date HolidayEnd  = jXDatePickerHolEnd.getDate();
    
    //Check Start date is before End Date
    if  (Holidaytart.after(HolidayEnd) ) {
	jHeatingExplantion.setText("Holiday start date is after end Date");
	return;
	}
    
    // Saye Holiday dates to OWL Device
    if (!Commands.OwlSaveHolidayDates (Holidaytart,HolidayEnd,wUDPKey.getText())) {
	jHeatingExplantion.setText(Commands. OwlErrorMsg());
	} else {
	jHeatingExplantion.setText("Holiday Dates Saved OK");	
	}
    }//GEN-LAST:event_jXDatePickerHolEndActionPerformed

    /**
     * Save Holiday Dates
     * @param evt 
     */
    private void jButtonHolidayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHolidayActionPerformed
    Date Holidaytart =  jXDatePickerHolStart.getDate();
    Date HolidayEnd  = jXDatePickerHolEnd.getDate();
    
    if (Holidaytart == null || HolidayEnd == null){
	Holidaytart = new Date();
	Holidaytart.setTime(0);
	HolidayEnd = new Date();
	HolidayEnd.setTime(0);
    }
    //Check Start date is before End Date
    if  (Holidaytart.after(HolidayEnd) ) {
	jHeatingExplantion.setText("Holiday start date is after end Date");
	return;
	}
    
    // Saye Holiday dates to OWL Device
    if (!Commands.OwlSaveHolidayDates (Holidaytart,HolidayEnd,wUDPKey.getText())) {
	jHeatingExplantion.setText(Commands. OwlErrorMsg());
	} else {
	jHeatingExplantion.setText("Holiday Dates Saved OK");
	}
    }//GEN-LAST:event_jButtonHolidayActionPerformed

    /**
     * Save Summer Dates
     * @param evt 
     */
    private void jButtonSummerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSummerActionPerformed
    OwlHeatingTimes SummerDates;
    SummerDates = new OwlHeatingTimes();
    SummerDates.iSummerStartDay  = (Integer) jSpinnerSummerStartDay.getValue();
    String s =  (String) jSpinnerSummerStartMth.getValue();
    SummerDates.iSummerStartMth= Month.valueOf(s.toUpperCase()).getValue(); // Convert Month name to Mth interger

    SummerDates.iSummerEndDay = (Integer)    jSpinnerSummerEndDay.getValue();
    s = (String)   jSpinnerSummerEndMth.getValue();	
    SummerDates.iSummerEndMth = Month.valueOf(s.toUpperCase()).getValue(); // Convert Month name to Mth interger	    
    // Saye Summer dates to OWL Device
    if (!Commands.OwlSaveSummerDates (SummerDates,wUDPKey.getText())) {
	jHeatingExplantion.setText(Commands. OwlErrorMsg());
	} else {
	jHeatingExplantion.setText("Summer Dates Saved OK");
	}	    
    }//GEN-LAST:event_jButtonSummerActionPerformed

    /**
     * Toggle Away mode
     * Start time: [optional] sets the time  in seconds (from 1/1/1970 00:00:00) that the  away mode should begin.
     * End time: [optional] sets the time in seconds (from 1/1/1970 00:00:00) that the away mode should end.     * 
     * @param evt 
     */
    private void jButtonAwayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAwayActionPerformed
	String sSw;
	if (jButtonAway.isSelected()) {
	    sSw = "ON";
//	    jButtonAway.setText("Away OFF");
//	    jButtonAway.setBackground(Color.RED);
	    
	} else {
	    sSw ="OFF";
//	    jButtonAway.setText("Away ON");
//	    jButtonAway.setBackground(Color.LIGHT_GRAY);
	}
	
	if (Commands.OwlAway(wUDPKey.getText())) {
	    jHeatingExplantion.setText("Toggled Away Mode OK");
	} else {
	     jHeatingExplantion.setText(Commands. OwlErrorMsg());
	}    
    }//GEN-LAST:event_jButtonAwayActionPerformed

    private void jPanelHeatingFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPanelHeatingFocusGained
	// Load Away time
	OwlHeatingTimes AwayTimes; 
        AwayTimes = new OwlHeatingTimes();
	AwayTimes = Commands.GetOwlAway(wUDPKey.getText());
	    
    }//GEN-LAST:event_jPanelHeatingFocusGained


    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged

    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
 		MulticastSocketClient workerthread;
		workerthread = new MulticastSocketClient(jHeatingExplantion,
							 jTextFieldCurrTemp,
							 jTextFieldReqTemp,
							 jTextFieldHeatState,
							 jTextFieldBattery,
							 jTextFieldHeatTimestamp,
							 jTextFieldHeatZone,
							 jTextFieldHeatLast,
							 jTextFieldHeatRssi,
							 jTextFieldHeatLqi,
							 jTextFieldHeatConfFlag,
							 jTextFieldHeatUntil,			
							 jTextFieldElectMacAddr,
							 jTextFieldElectTimeStamp,
							 jTextFieldElectRssi,
							 jTextFieldElectLinkQual,
							 jTextFieldElectBatt,
							 jTextFieldElectChan,
							 jTextFieldElectCurr,
							 jTextFieldElectDay);
		workerthread.execute();
    }//GEN-LAST:event_formWindowOpened

    private void jTextFieldElectLinkQualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldElectLinkQualActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldElectLinkQualActionPerformed

    private void jTextFieldElectDayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldElectDayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldElectDayActionPerformed

    /**
     * Set OWL Standby into Comfort mode
     * @param evt 
     */
    private void jButtonStandbyActionPerformed(java.awt.event.ActionEvent evt) {                                               
	if (Commands.OwlStandby(wUDPKey.getText())) {
	    jHeatingExplantion.setText("Set Standby Mode OK");
	} else {
	     jHeatingExplantion.setText(Commands. OwlErrorMsg());
	}
    }                                              
    
    /**
     * Find length of valid chars at the start of a buffer
     * @param s buffer for which length is to be found
     * @return 
     */
    private int iAlphaNumericLth(String s) {
	for (int i = s.length() - 1; i >= 0; i--) {
	    char c = s.charAt(i);
	    if ( Character.isDefined(c) && (c != 00)) //Character.isLetter(c) || Character.isDigit(c) 
		return i+1;
	}
	return -1; // no alphanumeric character at all
    }

    /**
     * Load the system details from the device into the system panel
     * @param UDPKey 
     */
    private void LoadSystemDetails (String UDPKey) {
	    int i;
	    double dTemp;
	    // Load Version
	    String sParam [];
	    String sTemp = Commands.OwlVersion(Config.UDPKey1);
	    if (sTemp.equals("FAILED")) {
		try {
		    Thread.sleep(2000);
		} catch (InterruptedException ex) {
		    jHeatingExplantion.setText(Commands.OwlErrorMsg()+ "sleep Excpetion");
		    Logger.getLogger(OwlUI.class.getName()).log(Level.SEVERE, null, ex);
		}
		sTemp = Commands.OwlVersion(Config.UDPKey1);
		if (sTemp.equals("FAILED")) {
		    jHeatingExplantion.setText(Commands.OwlErrorMsg());
		}
		
	    }else {
		sParam = sTemp.split(",");
		jTextVersion.setText(sParam[3]);
		jTextFirmware.setText(sParam[2]);
		jTextBuild.setText(sParam[4]);
	    }
	    
	    // Display  Clock Times 
	    sTemp = Commands.OwlClock(Config.UDPKey1);  
	    sParam = sTemp.split(",");
	    jTextClockUTC.setText(ConvertUnixTimetoString(sParam[2]));// Display UTC Time 
	    jTextClockLocal.setText(ConvertUnixTimetoString(sParam[3])); // Display Local Time
	    
	    // Display Up Time
	    sTemp = Commands.OwlUptime(Config.UDPKey1);
	    sParam = sTemp.split(",");
	    jTextUpTime.setText(sParam[2]);

	    // Load Commands Into ComBo Box
	    for(i=0; i<Commands.OwlNoOfCommands(); i++){
		String item = Commands.OwlCommandList(i);
		if (!item.isEmpty()) {
		    jCommandComboBox.addItem(item);
		} 
	    }	
    }
    
  
    
    private String ConvertUnixTimetoString (String sTime ) {
	// Validate the Time
	try {
	    String s = new String("Str87uyuy232");
	    Matcher matcher = Pattern.compile("\\d+").matcher(sTime);
	    matcher.find();
	    long unix_seconds = Integer.valueOf(matcher.group());

	    //convert seconds to milliseconds
	    Date date = new Date(unix_seconds*1000L); 
	    // format of the date
	    SimpleDateFormat jdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss z");
	    return(jdf.format(date));	

	} catch (NumberFormatException e) { 
	    return(" not numeric " + sTime);
	}
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
	/* Set the Nimbus look and feel */
	//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
	/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
	 */
	try {
	    for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
		if ("Nimbus".equals(info.getName())) {
		    javax.swing.UIManager.setLookAndFeel(info.getClassName());
		    break;
		}
	    }
	} catch (ClassNotFoundException ex) {
	    java.util.logging.Logger.getLogger(OwlUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (InstantiationException ex) {
	    java.util.logging.Logger.getLogger(OwlUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (IllegalAccessException ex) {
	    java.util.logging.Logger.getLogger(OwlUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (javax.swing.UnsupportedLookAndFeelException ex) {
	    java.util.logging.Logger.getLogger(OwlUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	}
	//</editor-fold>

	/* Create and display the form */
	java.awt.EventQueue.invokeLater(new Runnable() {
	    public void run() {
		new OwlUI().setVisible(true);

	    }
	});	
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddEntry;
    private javax.swing.JButton jButtonAway;
    private javax.swing.JButton jButtonComfort;
    private javax.swing.JButton jButtonDelPeriod;
    private javax.swing.JButton jButtonHoliday;
    private javax.swing.JButton jButtonLoad;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonStandby;
    private javax.swing.JButton jButtonSummer;
    private javax.swing.JButton jButtonTransmit;
    private javax.swing.JComboBox<String> jCommandComboBox;
    private javax.swing.JTextArea jCommandDesc;
    private javax.swing.JTextField jCommandTextField;
    private javax.swing.JTextArea jHeatingExplantion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelHeatConfFlag;
    private javax.swing.JLabel jLabelHeatLast;
    private javax.swing.JLabel jLabelHeatLgi;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanelElectricity;
    private javax.swing.JPanel jPanelHeating;
    private javax.swing.JPanel jPanelSystem;
    private javax.swing.JTextArea jResponseTextArea;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JSpinner jSpinnerSummerEndDay;
    private javax.swing.JSpinner jSpinnerSummerEndMth;
    private javax.swing.JSpinner jSpinnerSummerStartDay;
    private javax.swing.JSpinner jSpinnerSummerStartMth;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTablePeriods;
    private javax.swing.JTextField jTextBuild;
    private javax.swing.JTextField jTextClockLocal;
    private javax.swing.JTextField jTextClockUTC;
    private javax.swing.JTextField jTextFieldBattery;
    private javax.swing.JTextField jTextFieldCurrTemp;
    private javax.swing.JTextField jTextFieldElectBatt;
    private javax.swing.JTextField jTextFieldElectChan;
    private javax.swing.JTextField jTextFieldElectCurr;
    private javax.swing.JTextField jTextFieldElectDay;
    private javax.swing.JTextField jTextFieldElectLinkQual;
    private javax.swing.JTextField jTextFieldElectMacAddr;
    private javax.swing.JTextField jTextFieldElectRssi;
    private javax.swing.JTextField jTextFieldElectTimeStamp;
    private javax.swing.JTextField jTextFieldHeatConfFlag;
    private javax.swing.JTextField jTextFieldHeatLast;
    private javax.swing.JTextField jTextFieldHeatLqi;
    private javax.swing.JTextField jTextFieldHeatRssi;
    private javax.swing.JTextField jTextFieldHeatState;
    private javax.swing.JTextField jTextFieldHeatTimestamp;
    private javax.swing.JTextField jTextFieldHeatUntil;
    private javax.swing.JTextField jTextFieldHeatZone;
    private javax.swing.JTextField jTextFieldReqTemp;
    private javax.swing.JTextField jTextFirmware;
    private javax.swing.JTextField jTextUpTime;
    private javax.swing.JTextField jTextVersion;
    private javax.swing.JToggleButton jToggleButtonBoost;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker6;
    private org.jdesktop.swingx.JXDatePicker jXDatePickerHolEnd;
    private org.jdesktop.swingx.JXDatePicker jXDatePickerHolStart;
    private javax.swing.JCheckBox wCheckBoxElectic;
    private javax.swing.JCheckBox wCheckBoxHeating;
    private javax.swing.JTextField wIPAddress;
    private javax.swing.JTextField wUDPKey;
    // End of variables declaration//GEN-END:variables
}
